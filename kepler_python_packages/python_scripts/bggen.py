"""
Tool to generate KEPLER BURN generators.
"""

import numpy as np
import isotope
from abuset import AbuSet, IonList
import textwrap

_minnet = [
    'nt1',
    'h1', 'h2', 'h3',
    'he3', 'he4',
    'li6', 'li7',
    'be7', 'be9',
    'b8', 'b10', 'b11',
    'c11', 'c12', 'c13', 'c14',
    'n13', 'n14', 'n15', 'o14',
    'o15', 'o16', 'o17', 'o18',
    'f16', 'f17', 'f18', 'f19',
    'ne19', 'ne20', 'ne21', 'ne22',
    'na21', 'na22', 'na23',
    'mg23', 'mg24', 'mg25', 'mg26',
    'al25', 'al26', 'al27',
    'si27', 'si28', 'si29', 'si30',
    'p30', 'p31',
    's31', 's32', 's33', 's34', 's35', 's36',
    ]


class Composition(AbuSet):
    """
    Composition is an AbuSet with a mixture name required

    'mixture' may be given as first argument or by keyword
    """
    def __init__(self, *args, **kwargs):
        mixture = kwargs.get('mixture', None)
        if mixture is None:
            raise Exception('Require mixture name.')
        super().__init__(*args, **kwargs)

class Network(IonList):
    """
    Network is an IonList with a network number 'netnum'.
    """
    def __init__(self, *args, **kwargs):
        # initialise with minnet?
        netnum = kwargs.pop('netnum', None)
        if netnum is None:
            if len(args) > 0 and isinstance(args[0], str):
                netnum = args.pop(0)
            else:
                netnum = 1
        self.netnum = netnum
        kwargs['duplicates'] = False
        super().__init__(*args, **kwargs)
        self.compositions = []
        self.minnet = np.array([isotope.ion(i) for i in _minnet])
        self.add(self.minnet)
        # find gaps
        gaps = []
        j = self.minnet[0]
        for i in range(1, len(self.minnet)):
            j, i = self.minnet[i], j
            if i.Z == j.Z and j.A > i.A + 1:
                gaps.append(isotope.ion(Z = j.Z, A = i.A + 1))
        self.gaps = np.array(gaps)

    def add_comp(self, *args, **kwargs):
        if len(args) > 0 and isinstance(args[0], AbuSet):
            comp, *args = args
        if not isinstance(comp, AbuSet):
            comp = AbuSet(*args, **kwargs)
        if comp.mixture is None:
            comp.mixture = 'comp{:d}'.format(len(self.compositions) + 1)
        self.add(comp.ions())
        self.compositions.append(comp)

    def write_bg(self, outfile):
        if isinstance(outfile, str):
            f = open(outfile, 'w')
        else:
            f = outfile
        # TODO : preserve/fill gaps


        # fill gaps

        # preserve gaps

        f.write('# network generated by bggen\n')
        s = ' '.join([i.Kepler() for i in sorted(self.ions())])
        s = textwrap.indent(textwrap.fill(s, 50), 'net 1 ') + '\n'
        f.write(s)
        f.close()


def test():
    hcomp = Composition(
        dict(h1=0.7, he4=0.28, n14=0.02),
        mixture = 'hcomp',
        )
    fecomp = Composition(
        dict(fe56 = 1.0),
        mixture = 'fecomp',
        )

    bg = Network()
    bg.add_comp(hcomp)
    bg.add_comp(fecomp)
    bg.write_bg('xxx1')
